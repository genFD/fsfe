[00:00:00]
>> Jem Young: In this section, we're gonna discuss HTTP. And it's probably one of the longer sections of other than security, because security's important and HTTP is important. It's surprising as UI developers how little we kind of dig into the underlying protocol of the thing that's transforming all of our code.

[00:00:18]
I mean, [LAUGH] we literally write hypertext markup. And this is one of the ways, or this is the way that hypertext gets transferred over the Internet. But we never spent a lot of time thinking about, how it's working or why it's working? So in my mind, to be a good full stack engineer, you have to understand what this protocol is.

[00:00:37]
And like everything else that ends in a P, it means it's a protocol. [LAUGH] So what is HTTP?
>> Jem Young: There are no wrong answers. If you haven't figured that out, just throw something out, yeah?
>> Speaker 2: HyperText Transport Protocol.
>> Jem Young: That's pretty good. Did you look at the next slide?

[00:00:55]

>> Speaker 2: No.
>> Jem Young: Right, yes, you're absolutely right. HyperText Transport Protocol. But what is it really, besides that definition?
>> Speaker 2: It's a standard?
>> Jem Young: Yeah, it's this thing that carries our code. It defines how the code moves from the server to our client. And how to decrypt that, more importantly.

[00:01:17]
And HTTP runs over TCP. And we talked a bit about TCP and IP and UDP and all the Ps. But HTTP's really the one we care most about. Because as a UI engineer, or even a full stack engineer, you don't care that much about TCP. You know that it works.

[00:01:33]
You know that there's a standards body, that they all agreed that if I send you a packet of information with the TCP protocol, Transmission Control Protocol, you know how to decode that. But HTTP is really, it's what the data is comprised of. So a packet wraps HTTP data and then we decode that.

[00:01:51]
And the browser's all know to decode, they speak this common language.
>> Jem Young: The model for HTTP is request and response, much like TCP. Versus something, like we talked about UDP or ICMP. Those are just packets that are broadcasting. This one cares about request and response. That's the entire model of HTTP.

[00:02:09]
The request and response. And we'll dig into that.
>> Jem Young: An HTTP request actually looks something like this, along with the data payload. But mainly, we see a few key parts here. We see the GET, so the method. Then we see a bunch of headers. And then somewhere in there will be a data payload.

[00:02:27]
And it's funny if I showed you this and didn't tell you it was HTTP. You could probably guess this is what an HTTP diagram looks like. But we never think about, what is the breakdown of the actual structure what HTTP is?

